What is Recursion?

- A recursive method is a method that directly or indirectly calls 
  itself.
- Recursion should be considered when a problem can be solved by solving
  a smaller instance of the same problem and then changing it a little. The 
  smaller instance is solved the same way. 
- The small case is called the base case. A recursive algorithm should always
  have a base case. Eventually, the problem has to get small enough to be 
  solved on its own (without recursion). 
- Each recursive call should simplify the problem (get closer to the base case). 

Execution/Run-Time Stack

- The execution stack is used to help manage control flow between methods as a 
  program runs. Each method that gets called has an activation record on the stack. 
  The method at the top is the method currently being executed. When it is finished, 
  its activation record is popped off. Activation records have space for the method's 
  parameters and variables, plus fields to manage control flow. This helps us understand
  how recursion is managed. 

Bad Recursive Methods 

- We will look at methods that do not implement recursion properly. This will help us 
  avoid future mistakes while implementing recursion. 

public void printInReverse(Node<String> r) 
{
    printInReverse(r.getLink());
    System.out.println(r.getData());
}

Student Answer: The method does not account for r being null which would mean 
                we could return a StackOverflowError. 

public static int fib(int n) 
{
    if (n < 2) 
    {
        return 1;
    }
    else 
    {
        return fib(n + 1) - fib(n - 1);
    }
}

Student Answer: The answer would always return  difference of two separate
                factorials instead of the input multiplying precedig inputs.
                This means our answer would become infinite and induce a 
                StackOverflowError.   