    Linked Lists vs. Arrays

    - Arrays are stored in consecutive cells in RAM. You have to specify a
      type and a count of the number of elements.
    - Java understands the amount of space the type takes, so it scales the
      int size by the number of elements in the array, thus creating the size
      of memory for that array.
    - A program can access a direct element of the array, along with Java 
      knowing the initial position of the array in RAM.
    - RAM is an advantage for arrays, but a drawback is that the size of an 
      array is fixed. Another drawback is that it is expensive to insert in 
      or delete an element. All elements from that point forward have to be 
      shifted.
    - Linked lists is a structure composed of nodes. In a singly-linked list, 
      each node contains the link (RAM address) of the next node, along with a
      piece of textual, object, or numeric data. The tail node's link is null
      which signifies that it is the end of the list.

    Traversal

    - A class involving linked lists often involves the traversal of nodes. The
      most simple type of linked list includes a field that counts the number 
      of nodes in the list, along with a reference to the head node. 
    
    IntNode Class from Textbook

    - We are provided with an IntNode class that allows us to learn about the 
      linked list structure. We will use this class when making a 
      DoubleArraySeq class.