**Clock.java, CuckooClock.java, and Clock24.java are just used as
Inheritance examples. The main notes will be on here. 

What is Inheritance?

- Inheritance --> a new class derives attributes and behaviors from
                  an existing class
    - The new class is called the subclass
    - The existing class is called the superclass
- Inheritance is used to extend the functionality of the clases

Extended Classes

- Subclass inherits the fields and methods from the superclass
    - We call these inherited methods and fields
- Methods and fields added to subclass will only be accessible to 
that class or its subclasses
- For our example, we can call Clock methods on an instance of CuckooClock

Protected Members

- Besides public and private, we also have an access modifier called Protected
    - Protected memory can only be accessed by its original class and subclasses

Private Members
- Private member is inherited by any subclass of the superclass
- However, a subclass cannot directly access a private attribute 
  of the superclass 
    - The member still exists for the subclass in memory

Constructors

- A subclass can have its own Constructors
    - If no constructor is declared, it may use a no-arg constructor inherited
      from the superclass
    - If one is declared, then it loses access to the superclass's no-arg
      Constructors
- Superclass constructors with arguments are not inherited
- If a subclass adds its own instance fields, the inherited no-arg constructor
  sets those to the default values, then does the work of the superclass's no-arg
  constructor

Overriding Methods

- In some cases, a subclass may need to implement an inherited differently than its
  than its superclass
- We can override a method in the subclass
    - A method is overridden when the subclass declares a method with the same 
      signature

Covariant

- An overridden method can have a different return in the subclass's 
  implementation
- The return type may be a descendent of the return type of the original method
    - The clone() method is a primary example

Widening Conversions

- We can assign an instance of a subclass to a reference variable of its 
  superclass
// Clock c = new Clock24();
- c has a static type of Clock, but a dynamic type of Clock24
- We can only call methods that belong to the static type of a variable
- Java performs dynamic method activation to perform the instance's version of
  that method
    - The Java runtime checks the dynamic type of a variable
    - If the dynamic type has its own version of a method, its version is executed
      instead
// Clock c1 = new CuckooClock();
c1.isCuckooing(); // compilation error!
Clock c2 = new Clock24();
c2.getHour(); // calls Clock24's getHour()

Narrowing Conversions

- Assignments from a superclass dynamic type to a subclass static type are allowed
    - We must cast the superclass to the subclass type to avoid a compilation error
    - Even then, its possible to still get a runtime error
// Clock c = new Clock();
// CuckooClock cuckoo = (CuckooClock) c; --> runtime error!