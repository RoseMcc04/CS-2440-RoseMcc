GUIs (Graphical User Interfaces)

- GUIs allow users to interact with a program using graphical
  elements such as windows, buttons, and many other features
- The primary framework used in this course is Swing
- Swing is part of Oracle's Java Foundation Classes (JFC), which 
  is an API (Application Program Interface) for making GUIs
- The package for Swing is javax.swing

Parts of a GUI 

- minimize button --> minimizes the interface size
- expand button --> maximizes the interface size
- close button --> closes out of the GUI
- title bar --> where you put the name of the program
- label --> specific area of the GUI
- button --> object when clicked on allows the user to perform a
             specific 
- spinner --> object that allows the user to click on arrows to
              choose a specific parameter
- frame --> the underlying structure of the interface
- checkbox --> GUI structure that allows the user to check one or 
               multiple options out of a list
- dropdown menu --> allows a dropdown list for the selection of
                    one item for the user 
- radio button --> allows the user to specifically pick one options
                   out of a range of options 

General Steps

1. Declare and allocate a JFrame since it is the window. Then, set 
   the properties.
2. Organize GUI components into categories and allocate a JPanel for
   each category. Decide on a layout manager for each JPanel and use 
   it to add components to the JPanel.
3. Pick a layout manager for the JFrame and add the JPanels to the
   JFrame.
4. Create and add listeners to the components that require them.

JFrame 

- Basic window
- Title bar
- Frame 
- Minimize, Expand, Close buttons 
- JFrame gameFrame = new JFrame();

JPanel

- Container
    - Used to align components on the JFrame 
    - Other items are added to the JPanel 
    - Items will be inserted left to right
- Create 
    - Jpanel buttonPanel = new JPane();

JLabel

- Textual information
- Text can be set with constructor
- Text can be set with setText(String newText) method

JTextField

- Allows user to enter Text
- Interpreted as a String type
- Can either use parseInt or parseDouble in Integer or Double classes
  that take Strings and return them as ints and doubles
- Can specify length in the constructor, parameter is number of
  characters
- JTextField jtfFirst = new JTextField();
- String s = jtfFirst.getText();
- jtfFirst.setText("Hello World");

JButton

- Standard button you can click with a mouse
- Has text on face
- Uses ActionListener to detect mouse clicks
- Create a button with the text Add on its face
   - JButton jbAdd = new JButton("Add");
- Usually added to a JPanel instead of the JFrame

Layout Manager

- JFrame testFrmae = new JFrame();
- JPanel buttonPanel = new JPanel();
- JButton jbTest = new JButton("Test Me");

- buttonPanel.add(jbTest);
- testFrame.add(buttonPanel, BorderLayout.PAGE_END);

FlowLayout

- Default for JPanel
- Components inserted one at a time and centered
- Next component is placed right of the first and both centered
- Continues until components can no longer fit on a line 
- Last added component will be centered on the next line 

BorderLayout

- Default for JFrame 
- Divided into 5 sections: PAGE_START (NORTH), PAGE_END (SOUTH), 
  LINE_START (WEST), CENTER, and LINE_END (EAST) 

BoxLayout

- More flexible version of FlowLayout

CardLayout

- More complicated layout that allows 2 or more components to 
  share the same display spaces
- Allows user to choose between components using a menu

ActionListener 

- 